
- Source code (C/C++)

	Header file
	
		Archive file with ".h" (C) extension - Warning! C++ may use ".hpp" convention
		Contain typedefs, function prototypes, other
		May be implemented by multiple implementation files (each with own partial implementation)
	
	Implementation file
	
		Archive file with ".c" (C) or ".cpp" (C++) extension
		Contain the implementation of
		May implement multiple header files
	
- Static library

	Collection of object files
	Archive file with ".lib" (Windows OS) or ".a" (Unix-like OS) extension
	May be (or not - sometimes automatically done) indexed (i.e. keep object files together on the hardware) before use - Warning! It makes easier to the machine when linking the object files into an executable - rather than locating separately on the hardware
	
	Object file
	
		Contain object code (i.e. relocatable format machine code)
		Archive file with ".obj" (Windows OS) or ".o" (Unix-like OS) extension
		Linked into a program during the linking phase of compilation
	
	Static linking: copy all the object code from the static library into the executable (thus a static library is not needed at run time) - Warning! Include only required functionality - minimize executable size
	
	Source code file(s) > (compiler - without linking) > Object file(s) > (library manager) > Static library file
	
		(C++ in Window OS)
		Source code files: "Foo.h" header file, "Foo.cpp" implementation file
		Compile command: "cl /c /EHsc Foo.cpp" (output "Foo.obj" object file)
		Post-build command: "lib Foo.obj" (output "Foo.lib" library file)
		Usage (by a module): reference "Foo.lib" library file and include "Foo.h" header file
	
	References
	
		https://medium.com/@bdov_/https-medium-com-bdov-c-static-libraries-what-why-and-how-b6b442b054d3 - Static library
		https://learn.microsoft.com/en-us/cpp/build/walkthrough-creating-and-using-a-static-library-cpp?view=msvc-170 - Create static library

- Dynamic-link library (DLL)

	Module that contains functions and data that can be used by another module (application or DLL)
	Archive file with ".dll" (Windows OS) or ".so" (Unix-like OS) extension
	
		Internal functions: intended to be called by other modules - Warning! May also be called from within the DLL
		External functions: called only from within the DLL
		Data - Warning! Generally used only by its functions
		
		Modularize applications (easier update and reuse)
		Reduce memory overhead when many applications use same functionality at same time (because share DLL code)
	
	Dynamic linking: allow a module to include only the information needed to locate an exported DLL function (or data item) at load time or run time
	
		Load-time dynamic linking
		
			Require to link the module with the import library for the DLL - Warning! The linker creates a table that contains the address of each function call
			
				OS search (try to locate) the DLL: on success map the DLL into the virtual address space of the process, increment the DLL reference count; on failure terminate the process, report the error
				Call the DLL entry-point function: on failure terminate the process, report the error
				Modify the function address table with the starting addresses for the imported DLL functions - Warning! The DLL is loaded into physical memory only when needed
			
			The module call exported DLL functions explicitly (i.e. as if they were local functions)
			
			Import library

				Contain the information needed to load the DLL and locate exported DLL functions (or data items) when the application is loaded
				Archive file with ".lib" (Windows OS) or ".a" (Unix-like OS) extension - Warning! Not a static library
		
		Run-time dynamic linking
		
			The module load the DLL ("LoadLibrary" function) on run time
			
				OS search (try to locate) the DLL: on success map the DLL into the virtual address space of the process (unless already mapped - return a handle to the DLL), increment the DLL reference count; on failure return NULL
				Call the DLL entry-point function (unless already loaded): on success return a handle to the DLL; on failure return NULL
			
			Get the addresses of the exported DLL functions ("GetProcAddress" function)
			Call exported DLL functions using retrieved function pointers - Warning! Thus need not an import library for the DLL
			Free the DLL ("FreeLibrary" function) if no longer needed: decrement the DLL reference count, unmap the DLL code from the virtual address space of the process if the reference count is 0
	
	"DllMain" user-defined DLL entry point: called on DLL load (do initialization) or unload (do cleanup)
	Only can have one instance running in OS
	Can not own resources (e.g. stack, threads of execution, global memory, file handles, message queue) but can use those from calling thread (e.g. stack) and process (e.g. global memory)
	
	References
	
		https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-libraries - Dynamic-Link Library
		https://learn.microsoft.com/en-us/cpp/build/dlls-in-visual-cpp?view=msvc-170 - Create dynamic-link library
		https://learn.microsoft.com/en-us/cpp/build/walkthrough-creating-and-using-a-dynamic-link-library-cpp?view=msvc-170 - Create dynamic-link library

- Run-time dynamic linking

	Warning! See above

	References
	
		https://learn.microsoft.com/en-us/windows/win32/dlls/run-time-dynamic-linking - Run-time dynamic linking
		https://learn.microsoft.com/en-us/windows/win32/dlls/using-run-time-dynamic-linking - Using run-time dynamic linking
		https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya - "LoadLibrary" function
		https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-freelibrary - "FreeLibrary" function
		https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddress - "GetProcAddress" function
		<path>\glfw-<version>\src\win32_module.c::_glfwPlatformLoadModule - GLFW windowing library load DLL
		<path>\glfw-<version>\src\win32_module.c::_glfwPlatformGetModuleSymbol - GLFW windowing library get function pointer
		<path>\glfw-<version>\src\win32_platform.h - GLFW windowing library function pointer typedef

- OpenGL extensions

	???
	
	Extension name
	
		Official name of the extension
		Begin with a prefix - indicate who developed (or promoted) the extension - Warning! Extension promotion flow: vendor-specific > EXT > ARB > Core OpenGL
		
			"ARB": extensions officially approved by the OpenGL ARB (Architecture Review Board)
			"EXT": extensions agreed upon by multiple OpenGL vendors
			"NV": Nvidia
			"AMD": AMD
			"INTEL": Intel
			"MESA": Mesa
	
	Extension name strings
	
		Allow identify whether an extension is supported by a given OpenGL implementation or not
		Begin with a prefix - indicate extension target (core OpenGL or window system)
		
			Warning! May be multiple strings if the extension provides both core OpenGL rendering functionality and window system dependent functionality
			
			"GL" prefix: core OpenGL extension
			"GLX" prefix: X Window System extension
			"WGL" prefix: Win32 window system extension
	
	WGL
	
		"WGL_ARB_extensions_string" - Warning! Promoted from "WGL_EXT_extensions_string"
		
			"const char *wglGetExtensionsStringARB(HDC hdc)": determine which WGL extensions are supported by a device
		
		Pixel format - Warning! Only to choose a pixel format (i.e. perform remaining - describe, set - with standard WGL functions)
			
			"WGL_ARB_pixel_format" - Warning! Promoted from "WGL_EXT_pixel_format"
			
				Query pixel format attributes (by name) and choose from the list of supported pixel formats
			
				"BOOL wglGetPixelFormatAttribivARB(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)"
				
					"<hdc>": device context on which to be queried pixel format is supported
					"<iPixelFormat>": to be queried pixel format index
					"<iLayerPlane>": to be queried plane (positive value - "1" (first), "2", ... - overlay planes; negative value - "-1" (first), "-2", ... - underlay planes; "0" main plane)
					"<nAttributes>": to be queried number of attributes
					"<*piAttributes>": to be queried pixel format attribute name list - Warning! Terminated by attribute name "0"
					"<*piValues>": return integer pixel format attribute value list
				
				"BOOL wglGetPixelFormatAttribfvARB(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, float *pfValues)"
				
					"<*pfValues>": float pixel format attribute value list
				
				"BOOL wglChoosePixelFormatARB(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)"
				
					Warning! Mandatory when use new pixel format attributes (those introduced by extensions) - because unknown for standard WGL "ChoosePixelFormat" function
					
					"<hdc>": device context
					"<*piAttribIList>": pixel format attribute list (integer attribute value) - a sequence of <name,value> pairs - Warning! Terminated by attribute name (attribute value not required) "0"
					
						Ignore non-specified attributes
					
					"<*pfAttribFList>": pixel format attribute list (float attribute value)
					"<nMaxFormats>": to be queried maximum number of pixel formats
					"<*piFormats>": return matching pixel format index list - Warning! Closest match and best format first
					"<*nNumFormats>": return number of matching pixel formats
				
				Attribute name in "<*piAttributes>" argument to "wglGetPixelFormatAttribivARB" and "wglGetPixelFormatAttribfvARB"
				Attribute name in "<*piAttribIList>" and "<*pfAttribFList>" argument to "wglChoosePixelFormatARB"
				
					"WGL_NUMBER_PIXEL_FORMATS_ARB 0x2000": number of pixel formats for the device context - Warning! Not all pixel format supported by the device context may be available (thus may be less than return by "DescribePixelFormat" function)
					"WGL_DRAW_TO_WINDOW_ARB 0x2001"
					"WGL_DRAW_TO_BITMAP_ARB 0x2002"
					"WGL_ACCELERATION_ARB 0x2003"
					"WGL_NEED_PALETTE_ARB 0x2004"
					"WGL_NEED_SYSTEM_PALETTE_ARB 0x2005"
					"WGL_SWAP_LAYER_BUFFERS_ARB 0x2006"
					"WGL_SWAP_METHOD_ARB 0x2007"
					"WGL_NUMBER_OVERLAYS_ARB 0x2008"
					"WGL_NUMBER_UNDERLAYS_ARB 0x2009"
					"WGL_TRANSPARENT_ARB 0x200A"
					"WGL_TRANSPARENT_RED_VALUE_ARB 0x2037"
					"WGL_TRANSPARENT_GREEN_VALUE_ARB 0x2038"
					"WGL_TRANSPARENT_BLUE_VALUE_ARB 0x2039"
					"WGL_TRANSPARENT_ALPHA_VALUE_ARB 0x203A"
					"WGL_TRANSPARENT_INDEX_VALUE_ARB 0x203B"
					"WGL_SHARE_DEPTH_ARB 0x200C"
					"WGL_SHARE_STENCIL_ARB 0x200D"
					"WGL_SHARE_ACCUM_ARB 0x200E"
					"WGL_SUPPORT_GDI_ARB 0x200F"
					"WGL_SUPPORT_OPENGL_ARB 0x2010"
					"WGL_DOUBLE_BUFFER_ARB 0x2011"
					"WGL_STEREO_ARB 0x2012"
					"WGL_PIXEL_TYPE_ARB 0x2013"
					"WGL_COLOR_BITS_ARB 0x2014"
					"WGL_RED_BITS_ARB 0x2015"
					"WGL_RED_SHIFT_ARB 0x2016"
					"WGL_GREEN_BITS_ARB 0x2017"
					"WGL_GREEN_SHIFT_ARB 0x2018"
					"WGL_BLUE_BITS_ARB 0x2019"
					"WGL_BLUE_SHIFT_ARB 0x201A"
					"WGL_ALPHA_BITS_ARB 0x201B"
					"WGL_ALPHA_SHIFT_ARB 0x201C"
					"WGL_ACCUM_BITS_ARB 0x201D"
					"WGL_ACCUM_RED_BITS_ARB 0x201E"
					"WGL_ACCUM_GREEN_BITS_ARB 0x201F"
					"WGL_ACCUM_BLUE_BITS_ARB 0x2020"
					"WGL_ACCUM_ALPHA_BITS_ARB 0x2021"
					"WGL_DEPTH_BITS_ARB 0x2022"
					"WGL_STENCIL_BITS_ARB 0x2023"
					"WGL_AUX_BUFFERS_ARB 0x2024"
				
				Return attribute value in "<piValues>" argument from "wglGetPixelFormatAttribivARB"
				Return attribute value in "<pfValues>" argument from "wglGetPixelFormatAttribfvARB"
				Attribute value in "<*piAttribIList>" and "<*pfAttribFList>" argument to "wglChoosePixelFormatARB"
				
					(for "WGL_ACCELERATION_ARB" attribute name)
					"WGL_NO_ACCELERATION_ARB 0x2025"
					"WGL_GENERIC_ACCELERATION_ARB 0x2026"
					"WGL_FULL_ACCELERATION_ARB 0x2027"
					
					(for "WGL_SWAP_METHOD_ARB" attribute name)
					"WGL_SWAP_EXCHANGE_ARB 0x2028"
					"WGL_SWAP_COPY_ARB 0x2029"
					"WGL_SWAP_UNDEFINED_ARB 0x202A"
					
					(for "WGL_PIXEL_TYPE_ARB" attribute name)
					"WGL_TYPE_RGBA_ARB 0x202B"
					"WGL_TYPE_COLORINDEX_ARB 0x202C"
			
			"WGL_ARB_pixel_format_float"- Warning! Promoted from "WGL_ATI_pixel_format_float"
			
				Allow floating-point framebuffers
				
				"void ClampColorARB(enum target, enum clamp)"
				
				Return attribute value in "<piValues>" argument from "wglGetPixelFormatAttribivARB"
				Return attribute value in "<pfValues>" argument from "wglGetPixelFormatAttribfvARB"
				Attribute value in "<*piAttribIList>" and "<*pfAttribFList>" argument to "wglChoosePixelFormatARB"
				
					(for "WGL_PIXEL_TYPE_ARB" attribute name)
					"WGL_TYPE_RGBA_FLOAT_ARB 0x21A0"
			
			"WGL_ARB_multisample"
			
				Allow multisampled framebuffers (an additional buffer - called the multisample buffer - is added to the framebuffer)
				
				Attribute name in "<*piAttributes>" argument to "wglGetPixelFormatAttribivARB" and "wglGetPixelFormatAttribfvARB"
				Attribute name in "<*piAttribIList>" and "<*pfAttribFList>" argument to "wglChoosePixelFormatARB"
				
					"WGL_SAMPLE_BUFFERS_ARB 0x2041"
					"WGL_SAMPLES_ARB 0x2042"
			
			"WGL_ARB_framebuffer_sRGB" - Warning! Promoted from "WGL_EXT_framebuffer_sRGB"
			
				Allow color buffers in sRGB format
				
				Attribute name in "<*piAttributes>" argument to "wglGetPixelFormatAttribivARB" and "wglGetPixelFormatAttribfvARB"
				Attribute name in "<*piAttribIList>" and "<*pfAttribFList>" argument to "wglChoosePixelFormatARB"
				
					"WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB 0x20A9"
			
			"WGL_EXT_colorspace" - Warning! OpenGL ES
			
				Allow color buffers in sRGB format
				
				Attribute name in "<*piAttributes>" argument to "wglGetPixelFormatAttribivARB" and "wglGetPixelFormatAttribfvARB"
				Attribute name in "<*piAttribIList>" and "<*pfAttribFList>" argument to "wglChoosePixelFormatARB"
				
					"WGL_COLORSPACE_EXT 0x309D"
				
				Return attribute value in "<piValues>" argument from "wglGetPixelFormatAttribivARB"
				Return attribute value in "<pfValues>" argument from "wglGetPixelFormatAttribfvARB"
				Attribute value in "<*piAttribIList>" and "<*pfAttribFList>" argument to "wglChoosePixelFormatARB"
				
					(for "WGL_COLORSPACE_EXT" attribute name)
					"WGL_COLORSPACE_SRGB_EXT 0x3089"
					"WGL_COLORSPACE_LINEAR_EXT 0x308A"
		
		Rendering context - Warning! Only to create a rendering context (i.e. perform remaining - make current - with standard WGL functions)
		
			"WGL_ARB_create_context"
			"WGL_ARB_create_context_profile"
			
				Create OpenGL rendering context
				
				"HGLRC wglCreateContextAttribsARB(HDC hDC, HGLRC hShareContext, const int *attribList)"
				
					"<*attribList>" rendering context attribute list - a sequence of <name,value> pairs - Warning! Terminated by attribute name (attribute value not required) "0"
					
						Use default value for non-specified attributes
						Use specified last value for multiple times specified attributes
				
				Attribute name in "<*attribList>" argument to "wglCreateContextAttribsARB"
				
					"WGL_CONTEXT_MAJOR_VERSION_ARB 0x2091"
					"WGL_CONTEXT_MINOR_VERSION_ARB 0x2092"
					"WGL_CONTEXT_LAYER_PLANE_ARB 0x2093"
					"WGL_CONTEXT_FLAGS_ARB 0x2094"
					"WGL_CONTEXT_PROFILE_MASK_ARB 0x9126"
				
				Attribute value for "WGL_CONTEXT_FLAGS_ARB" in "<*attribList>" argument to "wglCreateContextAttribsARB"
				
					"WGL_CONTEXT_DEBUG_BIT_ARB 0x0001"
					"WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB 0x0002"
				
				Attribute value for "WGL_CONTEXT_PROFILE_MASK_ARB" in "<*attribList>" argument to "wglCreateContextAttribsARB"
				
					Warning! Mutually exclusive
					
					"WGL_CONTEXT_CORE_PROFILE_BIT_ARB 0x00000001"
					"WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB 0x00000002"
				
				Error returned by "GetLastError"
				
					"ERROR_INVALID_VERSION_ARB 0x2095"
					"ERROR_INVALID_PROFILE_ARB 0x2096"
			
			"WGL_ARB_create_context_robustness"
			
				Create OpenGL rendering context supporting robust buffer access behavior and a specified graphics reset notification behavior
				
				Attribute value for "WGL_CONTEXT_FLAGS_ARB" in "<*attribList>" argument to "wglCreateContextAttribsARB"
				
					"WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB 0x00000004"
				
				Attribute name in "<*attribList>" argument to "wglCreateContextAttribsARB"
				
					"WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB 0x8256"
				
				Attribute value for "WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB" in "<*attribList>" argument to "wglCreateContextAttribsARB"
				
					"WGL_NO_RESET_NOTIFICATION_ARB 0x8261"
					"WGL_LOSE_CONTEXT_ON_RESET_ARB 0x8252"
			
			"WGL_ARB_create_context_no_error"
			
				Create OpenGL rendering context that does not generate errors (if the context supports a no error mode)
				
				Attribute name in "<*attribList>" argument to "wglCreateContextAttribsARB"
				
					"WGL_CONTEXT_OPENGL_NO_ERROR_ARB 0x31B3" - Warning! Set attribute value to "TRUE"
			
			"WGL_EXT_create_context_es_profile" - Warning! OpenGL ES
			"WGL_EXT_create_context_es2_profile" - Warning! OpenGL ES
			
				Create OpenGL ES rendering context
				
				Attribute value for "WGL_CONTEXT_PROFILE_MASK_ARB" in "<*attribList>" argument to "wglCreateContextAttribsARB"
				
					"WGL_CONTEXT_ES_PROFILE_BIT_EXT 0x00000004"
					"WGL_CONTEXT_ES2_PROFILE_BIT_EXT 0x00000004"
			
			"WGL_ARB_context_flush_control"
			
				Specify the implicit flush behavior that is desired when a rendering context is made non-current
				
				Attribute name in "<*attribList>" argument to "wglCreateContextAttribsARB"
				
					"WGL_CONTEXT_RELEASE_BEHAVIOR_ARB 0x2097"
				
				Attribute value for "WGL_CONTEXT_RELEASE_BEHAVIOR_ARB" in "<*attribList>" argument to "wglCreateContextAttribsARB"
				
					"WGL_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB 0x0000"
					"WGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB 0x2098"
		
		Buffer
		
			"WGL_EXT_swap_control"
			
				Specify a minimum periodicity of color buffer swaps (measured in video frame periods)
				
				"BOOL wglSwapIntervalEXT(int interval)"
				"int wglGetSwapIntervalEXT(void)"
	
	References
	
		https://www.khronos.org/opengl/wiki/OpenGL_Extension - OpenGL extensions
		https://www.opengl.org/archives/resources/features/OGLextensions/ - OpenGL extensions
		https://registry.khronos.org/OpenGL/index_gl.php - OpenGL Registry (ARB and KHR Extensions by number)
		
		https://registry.khronos.org/OpenGL/extensions/ARB/WGL_ARB_extensions_string.txt
		https://registry.khronos.org/OpenGL/extensions/EXT/WGL_EXT_extensions_string.txt
		
		https://registry.khronos.org/OpenGL/extensions/ARB/WGL_ARB_pixel_format.txt
		https://registry.khronos.org/OpenGL/extensions/EXT/WGL_EXT_pixel_format.txt
		https://registry.khronos.org/OpenGL/extensions/ARB/ARB_color_buffer_float.txt
		https://registry.khronos.org/OpenGL/extensions/ATI/WGL_ATI_pixel_format_float.txt
		https://registry.khronos.org/OpenGL/extensions/ARB/ARB_multisample.txt
		https://registry.khronos.org/OpenGL/extensions/ARB/ARB_framebuffer_sRGB.txt
		https://registry.khronos.org/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt
		https://registry.khronos.org/OpenGL/extensions/EXT/WGL_EXT_colorspace.txt
		
		https://registry.khronos.org/OpenGL/extensions/ARB/WGL_ARB_create_context.txt
		https://registry.khronos.org/OpenGL/extensions/ARB/WGL_ARB_create_context_robustness.txt
		https://registry.khronos.org/OpenGL/extensions/ARB/ARB_create_context_no_error.txt
		https://registry.khronos.org/OpenGL/extensions/EXT/WGL_EXT_create_context_es2_profile.txt
		https://registry.khronos.org/OpenGL/extensions/KHR/KHR_context_flush_control.txt
		
		https://registry.khronos.org/OpenGL/extensions/EXT/WGL_EXT_swap_control.txt
	
- API and extension headers

	Define interfaces (i.e. enumerants, function prototypes, function pointer typedefs)
	Maintained by Khronos Group
	
		"KHR/khrplatform.h": platform header file common to multiple Khronos APIs (e.g. OpenGL, OpenGL ES, OpenGL SC, Vulkan)
		
		Warning! Not #include both <GL/glcorearb.h> and either of <GL/gl.h> or <GL/glext.h> in the same source file
		
		"GL/glcorearb.h": OpenGL core profile interfaces; ARB extension interfaces
		"GL/glext.h": OpenGL (1.2 and above) compatibility profile interfaces; (all) extension interfaces
		
		"GL/wgl.h": WGL (1.0) API interfaces; WGL extension interfaces - Warning! Windows OS provide "wingdi.h"
		"GL/wglext.h": WGL extension interfaces
		"GL/glxext.h": GLX (1.3 and above) API interfaces; GLX extension interfaces - Warning! Unix-like systems provide standard "GL/glx.h"
	
	References
	
		https://registry.khronos.org/OpenGL/index_gl.php - OpenGL Registry (API and extension headers files)
		https://registry.khronos.org/OpenGL/api/GL/ - Header files

- OpenGL function pointers

	Function pointer typedef
	Function pointer declaration (i.e. variable) - Warning! It is a common practice to encapsulate OpenGL function pointers with "define" directive
	Function pointer loading ("wglGetProcAddress" function) - Warning! Require current rendering context

- Load WGL extensions, modern OpenGL functions and OpenGL extensions (with corresponding extension functions)

	Warning! Available functions depend on installed and available ICD
	
	Load "opengl32.dll"
	Create a rendering context
	Load required function pointer ("wglGetProcAddress" function) - Warning! Run-time dynamic link require to load "wglGetProcAddress" function manually
	
	References
	
		https://www.khronos.org/opengl/wiki/Load_OpenGL_Functions - Load OpenGL functions
		https://learn.microsoft.com/en-us/windows/win32/opengl/extending-opengl-functions - Extending OpenGL functions
		https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-wglgetprocaddress - "wglGetProcAddress" function
		<path>\glfw-<version>\src\wgl_context.c::_glfwInitWGL - GLFW windowing library load OpenGL function extensions

- Extension loading library

	???
	
	References
	
		https://www.khronos.org/opengl/wiki/OpenGL_Loading_Library

- GL3C extension loading library

	OpenGL core profile loading library
	
	API
	
		"gl3wInit": initialize the library - Warning! Require (create and make current) a rendering context
		"gl3wIsSupported": check if specified OpenGL version is available
		"gl3wGetProcAddress": get specified function pointer - Warning! Only useful for extension functions outside core profile (because others already loaded by the library)
	
	Options
	
		"--ext": include OpenGL extensions in "gl3w.h" header
	
	"gl3w_gen.py" - Python script; download "KHR/khrplatform.h" and "GL/glcorearb.h" header files and generate "gl3w.h" and "gl3w.c" files - Warning! Create corresponding directories ("include/KHR", "include/GL", "src")
	"gl3w.h": declare function pointers (function pointer typedefs from "GL/glcorearb.h" header) and corresponding "define" directive encapsulation
	"gl3w.c": load function pointers (into function pointers from "gl3w.h" header)
	
	References
	
		https://github.com/skaslev/gl3w

- OpenGL "SDK" (libraries, tools, guides)

	???
	
	References
	
		https://registry.khronos.org/OpenGL-Refpages/
