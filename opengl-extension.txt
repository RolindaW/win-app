
- Source code (C/C++)

	Header file
	
		Archive file with ".h" (C) extension - Warning! C++ may use ".hpp" convention
		Contain typedefs, function prototypes, other
		May be implemented by multiple implementation files (each with own partial implementation)
	
	Implementation file
	
		Archive file with ".c" (C) or ".cpp" (C++) extension
		Contain the implementation of
		May implement multiple header files
	
- Static library

	Collection of object files
	Archive file with ".lib" (Windows OS) or ".a" (Unix-like OS) extension
	May be (or not - sometimes automatically done) indexed (i.e. keep object files together on the hardware) before use - Warning! It makes easier to the machine when linking the object files into an executable - rather than locating separately on the hardware
	
	Object file
	
		Contain object code (i.e. relocatable format machine code)
		Archive file with ".obj" (Windows OS) or ".o" (Unix-like OS) extension
		Linked into a program during the linking phase of compilation
	
	Static linking: copy all the object code from the static library into the executable (thus a static library is not needed at run time) - Warning! Include only required functionality - minimize executable size
	
	Source code file(s) > (compiler - without linking) > Object file(s) > (library manager) > Static library file
	
		(C++ in Window OS)
		Source code files: "Foo.h" header file, "Foo.cpp" implementation file
		Compile command: "cl /c /EHsc Foo.cpp" (output "Foo.obj" object file)
		Post-build command: "lib Foo.obj" (output "Foo.lib" library file)
		Usage (by a module): reference "Foo.lib" library file and include "Foo.h" header file
	
	References
	
		https://medium.com/@bdov_/https-medium-com-bdov-c-static-libraries-what-why-and-how-b6b442b054d3 - Static library
		https://learn.microsoft.com/en-us/cpp/build/walkthrough-creating-and-using-a-static-library-cpp?view=msvc-170 - Create static library

- Dynamic-link library (DLL)

	Module that contains functions and data that can be used by another module (application or DLL)
	Archive file with ".dll" (Windows OS) or ".so" (Unix-like OS) extension
	
		Internal functions: intended to be called by other modules - Warning! May also be called from within the DLL
		External functions: called only from within the DLL
		Data - Warning! Generally used only by its functions
		
		Modularize applications (easier update and reuse)
		Reduce memory overhead when many applications use same functionality at same time (because share DLL code)
	
	Dynamic linking: allow a module to include only the information needed to locate an exported DLL function (or data item) at load time or run time
	
		Load-time dynamic linking
		
			Require to link the module with the import library for the DLL - Warning! The linker creates a table that contains the address of each function call
			
				OS search (try to locate) the DLL: on success map the DLL into the virtual address space of the process, increment the DLL reference count; on failure terminate the process, report the error
				Call the DLL entry-point function: on failure terminate the process, report the error
				Modify the function address table with the starting addresses for the imported DLL functions - Warning! The DLL is loaded into physical memory only when needed
			
			The module call exported DLL functions explicitly (i.e. as if they were local functions)
			
			Import library

				Contain the information needed to load the DLL and locate exported DLL functions (or data items) when the application is loaded
				Archive file with ".lib" (Windows OS) or ".a" (Unix-like OS) extension - Warning! Not a static library
		
		Run-time dynamic linking
		
			The module load the DLL ("LoadLibrary" function) on run time
			
				OS search (try to locate) the DLL: on success map the DLL into the virtual address space of the process (unless already mapped - return a handle to the DLL), increment the DLL reference count; on failure return NULL
				Call the DLL entry-point function (unless already loaded): on success return a handle to the DLL; on failure return NULL
			
			Get the addresses of the exported DLL functions ("GetProcAddress" function)
			Call exported DLL functions using retrieved function pointers - Warning! Thus need not an import library for the DLL
			Free the DLL ("FreeLibrary" function) if no longer needed: decrement the DLL reference count, unmap the DLL code from the virtual address space of the process if the reference count is 0
	
	"DllMain" user-defined DLL entry point: called on DLL load (do initialization) or unload (do cleanup)
	Only can have one instance running in OS
	Can not own resources (e.g. stack, threads of execution, global memory, file handles, message queue) but can use those from calling thread (e.g. stack) and process (e.g. global memory)
	
	References
	
		https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-libraries - Dynamic-Link Library
		https://learn.microsoft.com/en-us/cpp/build/dlls-in-visual-cpp?view=msvc-170 - Create dynamic-link library
		https://learn.microsoft.com/en-us/cpp/build/walkthrough-creating-and-using-a-dynamic-link-library-cpp?view=msvc-170 - Create dynamic-link library

- Run-time dynamic linking

	Warning! See above

	References
	
		https://learn.microsoft.com/en-us/windows/win32/dlls/run-time-dynamic-linking - Run-time dynamic linking
		https://learn.microsoft.com/en-us/windows/win32/dlls/using-run-time-dynamic-linking - Using run-time dynamic linking
		https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya - "LoadLibrary" function
		https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-freelibrary - "FreeLibrary" function
		https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddress - "GetProcAddress" function
		<path>\glfw-<version>\src\win32_module.c::_glfwPlatformLoadModule - GLFW windowing library load DLL
		<path>\glfw-<version>\src\win32_module.c::_glfwPlatformGetModuleSymbol - GLFW windowing library get function pointer
		<path>\glfw-<version>\src\win32_platform.h - GLFW windowing library function pointer typedef

- OpenGL extensions

	???
	
	Extension name
	
		Official name of the extension
		Begin with a prefix - indicate who developed (or promoted) the extension - Warning! Extension promotion flow: vendor-specific > EXT > ARB > Core OpenGL
		
			"ARB": extensions officially approved by the OpenGL ARB (Architecture Review Board)
			"EXT": extensions agreed upon by multiple OpenGL vendors
			"NV": NVIDIA Corporation
			"AMD": AMD
			"INTEL": Intel
			"MESA": Mesa
	
	Extension name strings
	
		Allow identify whether an extension is supported by a given OpenGL implementation or not
		Begin with a prefix - indicate extension target (core OpenGL or window system)
		
			Warning! May be multiple strings if the extension provides both core OpenGL rendering functionality and window system dependent functionality
			
			"GL" prefix: core OpenGL extension
			"GLX" prefix: X Window System extension
			"WGL" prefix: Win32 window system extension
	
	WGL
	
		"WGL_ARB_extensions_string"
		
			"const char *wglGetExtensionsStringARB(HDC hdc)": determine which WGL extensions are supported by a device - Warning! Promoted from "WGL_EXT_extensions_string::wglGetExtensionsStringEXT"
		
		"WGL_EXT_extensions_string"
		
			"const char *wglGetExtensionsStringEXT(void)": determine which WGL extensions are supported by a device - Warning! Promoted to "WGL_ARB_extensions_string::wglGetExtensionsStringARB"
		
		Pixel format
			
			"WGL_ARB_pixel_format"
			
				"BOOL wglGetPixelFormatAttribivARB(HDC hdc, ...)": ???
				"BOOL wglGetPixelFormatAttribfvARB(HDC hdc, ...)"
				"BOOL wglChoosePixelFormatARB(HDC hdc, ...)"
			
			"WGL_ARB_pixel_format_float"
			
				???
			
			"WGL_EXT_pixel_format"
			
				???
			
			"WGL_ATI_pixel_format_float"
			
				???
			
			"WGL_EXT_pixel_format_packed_float"
			
				???
		
		Rendering context
		
			"WGL_ARB_create_context"
			
				"HGLRC wglCreateContextAttribsARB(HDC hDC, HGLRC hShareContext, ...)": ???
			
			"WGL_ARB_create_context_profile"
			
				???
			
			"WGL_ARB_create_context_robustness"
			
				???
			
			"WGL_ARB_create_context_no_error"
			
				???
			
			"WGL_EXT_create_context_es_profile"
			
				???
			
			"WGL_EXT_create_context_es2_profile"
			
				???
		
		Buffer
		
			"WGL_EXT_swap_control"
			
				"BOOL wglSwapIntervalEXT(int interval)": ???			
	
	References
	
		https://www.khronos.org/opengl/wiki/OpenGL_Extension - OpenGL extensions
		https://www.opengl.org/archives/resources/features/OGLextensions/ - OpenGL extensions
		https://registry.khronos.org/OpenGL/index_gl.php - OpenGL Registry (ARB and KHR Extensions by number)
		
		https://registry.khronos.org/OpenGL/extensions/ARB/WGL_ARB_extensions_string.txt
		https://registry.khronos.org/OpenGL/extensions/EXT/WGL_EXT_extensions_string.txt
		
		https://registry.khronos.org/OpenGL/extensions/ARB/WGL_ARB_pixel_format.txt
		https://registry.khronos.org/OpenGL/extensions/ARB/ARB_color_buffer_float.txt
		https://registry.khronos.org/OpenGL/extensions/EXT/WGL_EXT_pixel_format.txt
		https://registry.khronos.org/OpenGL/extensions/ATI/WGL_ATI_pixel_format_float.txt
		https://registry.khronos.org/OpenGL/extensions/EXT/EXT_packed_float.txt
		
		https://registry.khronos.org/OpenGL/extensions/ARB/WGL_ARB_create_context.txt
		https://registry.khronos.org/OpenGL/extensions/ARB/WGL_ARB_create_context_robustness.txt
		https://registry.khronos.org/OpenGL/extensions/ARB/ARB_create_context_no_error.txt
		https://registry.khronos.org/OpenGL/extensions/EXT/WGL_EXT_create_context_es2_profile.txt
		
		https://registry.khronos.org/OpenGL/extensions/EXT/WGL_EXT_swap_control.txt
	
- API and extension headers

	Define interfaces (i.e. enumerants, function prototypes, function pointer typedefs)
	Maintained by Khronos Group
	
		"KHR/khrplatform.h": platform header file common to multiple Khronos APIs (e.g. OpenGL, OpenGL ES, OpenGL SC, Vulkan)
		
		Warning! Not #include both <GL/glcorearb.h> and either of <GL/gl.h> or <GL/glext.h> in the same source file
		
		"GL/glcorearb.h": OpenGL core profile interfaces; ARB extension interfaces
		"GL/glext.h": OpenGL (1.2 and above) compatibility profile interfaces; (all) extension interfaces
		
		"GL/wgl.h": WGL (1.0) API interfaces; WGL extension interfaces - Warning! Windows OS provide "wingdi.h"
		"GL/wglext.h": WGL extension interfaces
		"GL/glxext.h": GLX (1.3 and above) API interfaces; GLX extension interfaces - Warning! Unix-like systems provide standard "GL/glx.h"
	
	References
	
		https://registry.khronos.org/OpenGL/index_gl.php - OpenGL Registry (API and extension headers files)
		https://registry.khronos.org/OpenGL/api/GL/ - Header files

- OpenGL function pointers

	Function pointer typedef
	Function pointer declaration (i.e. variable) - Warning! It is a common practice to encapsulate OpenGL function pointers with "define" directive
	Function pointer loading ("wglGetProcAddress" function) - Warning! Require current rendering context

- Load WGL extensions, modern OpenGL functions and OpenGL extensions (with corresponding extension functions)

	Warning! Available functions depend on installed and available ICD
	
	Load "opengl32.dll"
	Create a rendering context
	Load required function pointer ("wglGetProcAddress" function) - Warning! Run-time dynamic link require to load "wglGetProcAddress" function manually
	
	References
	
		https://www.khronos.org/opengl/wiki/Load_OpenGL_Functions - Load OpenGL functions
		https://learn.microsoft.com/en-us/windows/win32/opengl/extending-opengl-functions - Extending OpenGL functions
		https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-wglgetprocaddress - "wglGetProcAddress" function
		<path>\glfw-<version>\src\wgl_context.c::_glfwInitWGL - GLFW windowing library load OpenGL function extensions

- Extension loading library

	???
	
	References
	
		https://www.khronos.org/opengl/wiki/OpenGL_Loading_Library

- GL3C extension loading library

	OpenGL core profile loading library
	
	API
	
		"gl3wInit": initialize the library - Warning! Require (create and make current) a rendering context
		"gl3wIsSupported": check if specified OpenGL version is available
		"gl3wGetProcAddress": get specified function pointer - Warning! Only useful for extension functions outside core profile (because others already loaded by the library)
	
	Options
	
		"--ext": include OpenGL extensions in "gl3w.h" header
	
	"gl3w_gen.py" - Python script; download "KHR/khrplatform.h" and "GL/glcorearb.h" header files and generate "gl3w.h" and "gl3w.c" files - Warning! Create corresponding directories ("include/KHR", "include/GL", "src")
	"gl3w.h": declare function pointers (function pointer typedefs from "GL/glcorearb.h" header) and corresponding "define" directive encapsulation
	"gl3w.c": load function pointers (into function pointers from "gl3w.h" header)
	
	References
	
		https://github.com/skaslev/gl3w

- OpenGL "SDK" (libraries, tools, guides)

	???
	
	References
	
		https://registry.khronos.org/OpenGL-Refpages/
