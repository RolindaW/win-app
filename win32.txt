
- Microsoft Windows Software Development Kit (SDK)

	Write a Windows program (in C or C++)
	Headers and libraries necessary to compile and link applications
	Cmmand-line tools for building applications (e.g. Visual C++ compiler and linker)
	Not support hardware driver development

- Microsoft Visual Studio (VS)

	IDE for software development
	Edit, debug, and compile code; publish applications
	Extra features: compilers, intellisense (i.e. code completion, parameter info, quick info, member info), graphic designer

- Windows API

	WinAPI or Win32 API
	Made up of several libraries (DLL) for many areas (e.g. user interface, windows and messages, graphics and multimedia)
	Most consist of either functions or Component Object Model (COM) interfaces; very few are provided as C++ classes (e.g. "GDI+" - 2D graphics API)

- Windows coding conventions

	Strange type definitions ("typedef"s) and variable names
	
	Typedefs
	
		Windows headers contain a lot of typedefs (many of these are defined in the header file "WinDef.h")
		
		Integer type
		
			"BYTE"      (8 bits - Unsigned)
			"WORD"      (16 bits - Unsigned)
			"DWORD"     (32 bits - Unsigned)
			
			"INT32"     (32 bits - Signed)
			"INT64"     (64 bits - Signed)
			"LONG"      (32 bits - Signed)
			"LONGLONG"  (64 bits - Signed)
			
			"UINT32"    (32 bits - Unsigned)
			"UINT64"    (64 bits - Unsigned)
			"ULONG"     (32 bits - Unsigned)
			"ULONGLONG" (64 bits - Unsigned)
			
			Certain amount of redundancy (due to the history of the Windows APIs)
			Fixed size (remain the same in both 32-bit and 64-applications)
		
		Boolean type
		
			"BOOL"
			
			A type alias for "int" (i.e. an integer type); distinct from C++ "bool" (and from other Boolean type representations)
			"WinDef.h" defines two values: "FALSE" (0); "TRUE" (1) - Warning! Functions returning BOOL type can return any non-zero value to indicate Boolean truth; checking "if (result == TRUE)" (i.e. "if (result == 1)") may fail; check "if (result)" or "if (result != FALSE)" instead
		
		Pointer type
		
			"TYPENAME* var;"  (dereference operator "*")
			"PTYPENAME var;"  (prefix "P-" or "Pointer")
			"LPTYPENAME var;" (prefix "LP-" or "Long Pointer" - a.k.a far pointer; needed on 16-bit Windows; preserved to port code to 32-bit Windows)
			
			Type of the form "pointer-to-X"
			Today no distinction (all are equivalent) - Warning! Avoid using prefixes
		
		Pointer precision type
		
			"DWORD_PTR"
			
			"INT_PTR"
			"LONG_PTR"
			
			"UINT_PTR"
			"ULONG_PTR"
			
			Size of a pointer (i.e. 32 bits wide in 32-bit applications, and 64 bits wide in 64-bit applications); fixed, determined at compile time
			Used where an existing 32-bit value was expanded to 64 bits on 64-bit Windows (e.g. cast an integer to a pointer, define variables for pointer arithmetic, or define loop counters (iterators) to iterate over the full range of bytes in memory buffers)
	
	Hungarian notation
	
		Add prefixes to variable names to provide additional information - Warning! Avoid using
		Avoid the accidental use of a variable in the wrong context
		
		Semantic information (i.e. intended use)
		
			"i-"   ("index")
			"cb-"  ("count of bytes")
			"rw-"  ("row")
			"col-" ("column")
		
		Type information
		
			"w-"  ("WORD")
			"dw-" ("DWORD")

- Characters and strings

	Code unit: unit of storage to encode (fully or partially) a code point; enconding impose size (e.g. UTF-8 8-bit, UTF-16 16-bit)
	Code point: atomic unit of information; made up by single or multiple code units
	Text: sequence of one or more code points
	Grapheme: sequence of one or more code points displayed as single graphical unit
	Character: overloaded term (meaning may differ)
	
	Character encoding - Warning! For UI elements, file names, and so on (i.e. to localize an application)
	
		ASCII
		
			1 byte per code unit; 1 code unit per code point i.e. 1 byte per code point - Warning! Only use bottom (least significant) 7-bit (0-127)
			Exclude non-ASCII characters: accented letters, non-Latin alphabets (e.g. Chinese, Japanese, Persian), symbols (e.g. mathematical, currency), emojis
			Electronic communication standard
		
		ANSI - Warning! Not an encoding itself, just an abstraction; usually refer default system locale
		
			1 byte per code point
		
		UTF-8
		
			1 byte per code unit; 1-4 code unit per code point (variable-width encoding) i.e. 1, 2, 3 or 4 byte per code point
			ASCII backward compatibility
		
		UTF-16
		
			2 byte per code unit; 1-2 code unit per code point (variable-width encoding) i.e. 2 or 4 byte per code point
			No ASCII backward compatibility
		
		Unicode (a.k.a. "wide" character - Warning! Not an encoding itself, just an abstraction - may refer UTF-8 or UTF-16)
		
			1 byte or multiple bytes per code point
	
	Literals
		
		"char a = 'a';"          (character)
		
		"char *str = "foo";"     (character string)
		
		"wchar_t a = L'a';"      (wide-character)
		
		"wchar_t *str = L"foo";" (wide-character string)
	
	Typdefs
	
		Warning! "char", "wchar_t" native data types are C++ standard, while "CHAR", "WCHAR" and "TCHAR" data types are not (but Windows-specific)
	
		"CHAR" - "char"                          (character)
		
		"PSTR" or "LPSTR" - "char*"              (character string)
		"PCSTR" or "LPCSTR" - "const char*"
		
		"WCHAR" - "wchar_t"                      (wide-character; header file "WinNT.h")
		
		"PWSTR" or "LPWSTR" - "wchar_t*"         (wide-character string)
		"PCWSTR" or "LPCWSTR" - "const wchar_t*"
	
	Functions
	
		Two parallel sets of APIs by string:
		
			ANSI strings: suffix "-A" in function name (e.g. "FunctionA")
			Unicode strings: suffix "-W" in function name (e.g. "FunctionW")
		
		Internally, the ANSI version translates the string to Unicode at run time (i.e. less efficient)
		Most recent Windows APIs typically have just a Unicode version.
	
	Macros and preprocessor symbols
	
		Warning! Avoid using generic-text mappings if build target always Unicode (because nonsense and non-standard - Windows OS specific)
	
		Functions: Windows headers define macros to resolve by preprocessor symbol
		
			Macro "Function" resolves to function "FunctionW" (Unicode) if preprocessor symbol "UNICODE"; otherwise, resolves to function "FunctionA" (ANSI)
		
		String literals: Windows SDK provides macros that map strings to Unicode or ANSI (useful to compile the same code for either ANSI or Unicode strings), depending on the platform
		
			"TCHAR"  resolves to "wchar_t" (Unicode) if "UNICODE"; otherwise, resolves to "char"  (ANSI) - Warning! "_TCHAR" in header file "tchar.h"
			"TEXT()" resolves to "L"foo""  (Unicode) if "UNICODE"; otherwise, resolves to ""foo"" (ANSI) - Warning! "_T()"/"_TEXT()" in header file "tchar.h"
		
		Some headers use preprocessor symbol "UNICODE", others "_UNICODE" - Warning! Define always both symbols (Visual C++ sets them both by default when create a new project)

- Application entry point

	Program primary function
	Serve as the starting point for program execution
	Transfer control to other functions (which return control after execution)
	
		C/C++, Java: "main"
		C#: "Main"
		Python: "init"
		Win32: "WinMain"

- Calling convention

	Specify how to pass arguments (stack management - cleanup and order) and return values between functions (callee) and callers
	Compiler (compile time) and platform specific
	
	"__cdecl":      stack cleanup - caller; parameter passing - push on stack in reverse order (right to left)
	"__stdcall":    stack cleanup - callee; parameter passing - push on stack in reverse order
	
		Data types for "__stdcall" calling convention - Warning! Declared in "WinDef.h"
		
		CALLBACK ("#define CALLBACK __stdcall"): for callback functions
		WINAPI   ("#define WINAPI __stdcall"): for system functions (most functions in Windows API)
		APIENTRY ("#define APIENTRY WINAPI"): for system functions
	
	"__fastcall":   stack cleanup - callee; parameter passing - store in registers, then push on stack in order (left to right)
	"__vectorcall": stack cleanup - callee; parameter passing - store in registers, then push on stack in reverse order

- Handles - Warning! Different from (event) handlers

	A number the OS uses to identify an object - Warning! Not a pointer (error on attemp to dereference)
	Opaque data type (i.e. fully encapsulated - unknown internals - user-defined/built-in data type)
	Handles (and correponding objects) are created and operated (handler as a parameter) through functions

- Software execution

	Program
	
		Set of instructions to perform specific task
		Source code (interpreted programming language) vs. binary (compiled programming language)
		Can have single or multiple processes
		
		Application - Warning! Term used interchangeably with program
		
			Program for the end user (i.e. end-user program)
			Usually run in more (rather than service) controlled environment (e.g. sandbox)
		
		Service
		
			Program to support other programs (not end-user program)
			Run on OS background
	
	Process
	
		Instance of a program being executed
		Allocate memory for resources (code, data, files), address space - may be seen as a slice of space
		Can have single or multiple threads (in single or multiple cores; share resources)
	
	Thread
	
		Basic unit of CPU utilization (program counter, stack, registers)
		Contained inside a process
		Schedule access to shared resources and address space - may be seen as a slice of time
		Can split itself into multiple running tasks
	
	Task - Warning! Term used interchangeably with process
	
		Set of instructions loaded in memory
