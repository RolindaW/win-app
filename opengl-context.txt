
- Library
	
	"GL/gl.h" - Core OpenGL function declarations
	"GL/glu.h" - OpenGL Utility (GLU) library
	"GL/glaux.h" - OpenGL Programming Guide Auxiliary (GLAUX) library
	"wingdi.h" - WGL functions and Windows functions that support Microsoft OpenGL implementation for Windows declarations - among others
	"gdi32.dll" ("C:\Windows\System32") - GDI implementation
	"opengl32.dll" ("C:\Windows\System32") - Microsoft OpenGL implementation for Windows (support up to version 1.1)
	"opengl.dll" - Silicon Graphics OpenGL implementation for Windows
	
	References
	
		https://learn.microsoft.com/en-us/windows/win32/gdi/windows-gdi
		https://learn.microsoft.com/en-us/windows/win32/api/wingdi/
		https://learn.microsoft.com/en-us/windows/win32/opengl/opengl - OpenGL
		https://learn.microsoft.com/en-us/windows/win32/opengl/opengl-on-windows-nt--windows-2000--and-windows-95-98 - OpenGL on Windows
		https://learn.microsoft.com/en-us/windows/win32/opengl/using-opengl-on-windows-nt-2000-and-windows-95-98 - Using OpenGL on Windows
		https://learn.microsoft.com/en-us/windows/win32/opengl/reference-for-win-32-extensions-to-opengl - Reference for Windows extensions to OpenGL: WGL functions, Windows functions and structures

- Device context (DC)

	A set of graphic objects (and their associated attributes) and the graphic modes that affect output
	OS requires a device context for each window on the display
	
	Device independence: draw and print output on a variety of devices; software that supports this device independence is contained in two DLL
	
		Graphics Device Interface (GDI) - "Gdi.dll"
		Device Driver - name depends on the device where the application draws output (e.g. "Vga.dll" to draw output on VGA display, "Epson9.dll" to print output on Epson FX-80 printer)
	
	Application must inform GDI to load particular device driver and to prepare the device for drawing/printing operations
	These tasks are accomplished by creating and maintaining a device context
	Warning! An application never has direct access to the DC (it operates on the structure indirectly by calling various functions)
	
	Device context layout: describe the order in which GDI objects and text are revealed (either left-to-right or right-to-left)
	
	Graphic objects
	
		Warning! OS automatically stores a set of default graphic objects in a device context on create (no default bitmap or path)
		
		Pen: line drawing; att: style, width, color; "GetDCPenColor"/"SetDCPenColor" function
		Brush: painting and filling; att: style, color, pattern, origin; "GetDCBrushColor"/"SetDCBrushColor" function
		Bitmap: copying or scrolling parts of the screen; att: size (bytes), dimensions (pixels), color-format, compression-scheme, other
		Palette: defining the set of available colors; att: colors, size (number of colors)
		Region: clipping and other operations; att: location, dimensions
		Path: painting and drawing operations; att: shape
		Font: text; att: typeface name, width, height, weight, character set, other
		
		"GetCurrentObject" function: retrieve the graphic object of specified type from a device context
		"GetObject" function: retrieve information (attributes) of specified graphic object
		"SelectObject" function: replace specified graphic object in a device context
	
	Graphic modes (specify how colors are mixed, where output appears, how output is scaled, other)
		
		Warning! OS automatically initializes a device context with default graphic modes
		
		Background: define how background colors are mixed with existing window or screen colors for bitmap and text operations; "GetBkMode"/"SetBkMode" function (get/set - default - background graphics mode)
		Drawing: define how foreground colors are mixed with existing window or screen colors for pen, brush, bitmap, and text operations; "GetROP2"/"SetROP2" function
		Mapping: define how graphics output is mapped from logical (or world) space onto the window, screen, or printer paper; "GetMapMode"/"SetMapMode" function
		Polygon-fill: define how the brush pattern is used to fill the interior of complex regions; "GetPolyFillMode"/"SetPolyFillMode" function
		Stretching: define how bitmap colors are mixed with existing window or screen colors when the bitmap is compressed (or scaled down); "GetStretchBltMode"/"SetStretchBltMode" function
	
	Type
	
		Display device context: draw on video display
		
			Warning! OS maintains a special display device context cache (or pool) for common, window and parent display device contexts
			
				Require release after use (because limited number and intended for shared use)
				Any changes to default data (graphic objects/modes attributes) are not permanent (lost after release)
		
			Class device context
			
				"CS_CLASSDC" window class device-context style
				One device context to be shared by all windows in the class
				Application must explicitly retrieve the class display device context for a window each time it must draw in it
				Need not to be released after use
				Retain any changes to default data even after release
				"GetDC" function - Warning! Use "GetDCEx" function to force OS to return a common display device context for a window with a class display device context
				Warning! Strictly for compatibility with 16-bit Windows
			
			Common device context
			
				Not explicitly specified window class device-context style
				Retrieved from OS cache
				Client coordinates
				Used in applications that perform infrequent drawing operations
				"GetDC"/"ReleaseDC" or "BeginPaint"/"EndPaint" functions
			
			Private device context
			
				"CS_OWNDC" window class device-context style
				Unique device context for each window in the class
				Retrieve context once and then use it for all subsequent painting
				Need not to be released after use
				Retain any changes to default data even after release
				Used in applications that perform numerous drawing operations
				"GetDC" function - Warning! Use "GetDCEx" function to force OS to return a common display device context for a window with a private display device context (useful for carrying out quick touch-ups to a window without changing the current attribute values of the private display device context)
			
			Window device context
			
				Warning! Any window can request it
				Retrieved from OS cache
				Window coordinates
				Enable drawing anywhere in a window - including non-client area
				"GetWindowDC" - or "GetDCEx" (with DCX_WINDOW option specified) - / "ReleaseDC" functions
				Warning! Intended for windows with custom non-client area
			
			Parent device context
			
				"CS_PARENTDC" window class device-context style
				Retrieved from OS cache
				Speed up to set up a window clipping region
				Warning! Intended for child windows only
		
		Printer device context: draw on printer (e.g. dot-matrix, ink-jet, laser) or plotter
		Memory (or compatible) device context: draw on bitmap (i.e. virtual device) - rather than sending output to an actual device
		Information device context: retrieve default device data
	
	References
	
		https://learn.microsoft.com/en-us/windows/win32/gdi/device-contexts - Device context
		https://learn.microsoft.com/en-us/windows/win32/winmsg/about-window-classes#classes-and-device-contexts - Window class and device context
		https://learn.microsoft.com/en-us/windows/win32/gdi/display-devices - Display device context
		https://learn.microsoft.com/en-us/windows/win32/gdi/private-display-device-contexts - Private display device context
		https://learn.microsoft.com/en-us/windows/win32/gdi/obtaining-a-private-display-device-context - Obtain a private display device context

- Microsoft implementation of OpenGL on Windows

	Core OpenGL commands - Warning! Support up to OpenGL 1.1 version
	
		Warning! Generic implementation has many limitations (e.g. no support for some pixel formats - stereoscopic images, alpha bitplanes and auxiliary buffers)
		
		"GL/gl.h" library - "gl" prefix function names: core OpenGL function declarations
		"opengl32.dll" library: links with applications to use OpenGL; when an application is run, "opengl32.dll" loads and checks the Windows registry for a GL driver (it then loads the driver if it finds one)
	
	OpenGL Utility (GLU) library
	
		Complement core OpenGL functions
		Manage texture support, coordinate transformation, polygon tessellation, rendering spheres, cylinders and disks, NURBS (Non-Uniform Rational B-Spline) curves and surfaces and error handling
		"GL/glu.h" library - "glu" prefix function names - Warning! Not recommended - use custom or third-party libraries instead
	
	OpenGL Programming Guide Auxiliary (GLAUX) library
	
		Platform-independent library - Warning! Do not use in production application - intended for "OpenGL Programming Guide"
		Manage windows, handle input events, draw classic 3-D objects, manage a background process and run a program
	
	WGL functions
	
		Connect OpenGL to Windows OS windowing system - Warning! Analogous to GLX extensions (connect OpenGL to X Window System - Linux OS / Mac OS)
		Manage rendering contexts, display lists, extension functions and font bitmaps
		"wingdi.h" header - "wgl" prefix function names; "opengl32.dll" implementation
		
			(rendering context)
			"wglCreateContext" function: create a new rendering context
			"wglGetCurrentContext" function: obtain a handle to the current rendering context of a thread
			"wglGetCurrentDC" function: obtain a handle to the device context related to theh current rendering context of a thread
			"wglMakeCurrent" function: set a thread current rendering context
			"wglDeleteContext" function: delete a rendering context
			
			(font and text)
			"wglUseFontBitmaps" function
			"wglUseFontOutlines" function
			
			(layer planes)
			"wglCopyContext" function
			"wglCreateLayerContext" function
			"wglDescribeLayerPlane" function
			"wglSetLayerPaletteEntries" function
			"wglGetLayerPaletteEntries" function
			"wglRealizeLayerPalette" function
			"wglSwapLayerBuffers" function
			
			(display-list space)
			"wglShareLists" function
			
			(extension functions)
			"wglGetProcAddress" function
			
			"wglSwapMultipleBuffers" function - Warning! No (un)official documentation
		
		Warning! API calls
		
		GL related "gdi32.dll" functions (e.g. "ChoosePixelFormat") invokes (or calls) "opengl32.dll" functions (e.g. "wglChoosePixelFormat")
	
	Windows functions for pixel formats and double buffering
	
		Warning! GL related "gdi32.dll" functions (e.g. "ChoosePixelFormat") invokes (or calls) "opengl32.dll" functions (e.g. "wglChoosePixelFormat")
		
		Support per-window pixel formats and window double buffering (for smooth image changes) - Warning! Apply only to OpenGL graphics windows
		"wingdi.h" header - "gdi32.dll" implementation
		
			(pixel format)
			"PIXELFORMATDESCRIPTOR" structure
			"ChoosePixelFormat" function: obtain the index of the pixel format supported by a device context that is the closest match to a specified pixel format description
			"GetPixelFormat" function: obtain the pixel format index of the current pixel format of a device context
			"SetPixelFormat" function: set a device context current pixel format to the pixel format specified by a pixel format index
			"DescribePixelFormat" function: fill a "PIXELFORMATDESCRIPTOR" structure with the pixel format properties specified by a device context and a pixel format index
			"GetEnhMetaFilePixelFormat" function
			
			(buffer)
			"SwapBuffers" function: copy the contents of an off-screen buffer to an on-screen buffer
	
	References
	
		https://learn.microsoft.com/en-us/windows/win32/opengl/components
		https://learn.microsoft.com/en-us/windows/win32/opengl/header-files
		https://learn.microsoft.com/en-us/windows/win32/opengl/guide-to-documentation

- Pixel format

	Describe the properties of a device context default framebuffer (i.e. drawing surface of a video display)
	
	"PIXELFORMATDESCRIPTOR" structure convey pixel format data - Warning! Microsoft OpenGL implementation for Windows
	
		"WORD  nSize": structure size
		"WORD  nVersion": structure version number - Warning! Always "1"
		"DWORD dwFlags": pixel buffer properties; multiple flags can be combined
		"BYTE  iPixelType": pixel data type (RGBA - "PFD_TYPE_RGBA" - or color-index - "PFD_TYPE_COLORINDEX" - pixels)
		"BYTE  cColorBits": number of color bitplanes in each color buffer (RGBA pixel type - color buffer size, excluding the alpha bitplanes; color-index pixel type - color-index buffer size)
		"BYTE  cRedBits": number of red bitplanes in each RGBA color buffer (color bits)
		"BYTE  cRedShift": shift count for red bitplanes in each RGBA color buffer
		"BYTE  cGreenBits"
		"BYTE  cGreenShift"
		"BYTE  cBlueBits"
		"BYTE  cBlueShift"
		"BYTE  cAlphaBits": alpha buffer - Warning! Not supported by Microsoft OpenGL implementation for Windows
		"BYTE  cAlphaShift"
		"BYTE  cAccumBits": total number of bitplanes in the accumulation buffer
		"BYTE  cAccumRedBits": number of red bitplanes in the accumulation buffer
		"BYTE  cAccumGreenBits"
		"BYTE  cAccumBlueBits"
		"BYTE  cAccumAlphaBits"
		"BYTE  cDepthBits": depth buffer (or z-buffer - Z-axis) depth
		"BYTE  cStencilBits": stencil buffer depth
		"BYTE  cAuxBuffers": number of auxiliary buffers - Warning! Not supported by Microsoft OpenGL implementation for Windows
		"BYTE  iLayerType" - Warning! Ignore - no longer used
		"BYTE  bReserved": number of overlay and underlay planes
		"DWORD dwLayerMask" - Warning! Ignore - no longer used
		"DWORD dwVisibleMask": transparent color or index of an underlay plane (RGBA pixel type - transparent RGB color value; color-index pixel type - transparent index value)
		"DWORD dwDamageMask" - Warning! Ignore - no longer used
	
	A device context can support several pixel formats (identified with consecutive one-based index values) - Warning! A device context can have just one current pixel format
	Each window has own current pixel format and should only be set once (because can lead to significant complications for the Window Manager and for multithread applications) - Warning! Limited to OpenGL windows
	
	References
	
		https://learn.microsoft.com/en-us/windows/win32/opengl/pixel-formats - Pixel format
		https://learn.microsoft.com/en-us/windows/win32/opengl/pixel-format-tasks - Pixel format tasks
		https://learn.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-pixelformatdescriptor - "PIXELFORMATDESCRIPTOR" structure
		https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-choosepixelformat - "ChoosePixelFormat" function
		https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-setpixelformat - "SetPixelFormat" function

- Framebuffer

	Memory buffer to store the pixels that make up an image
	
	A set of logical buffers
	
		Color buffer - a set of logical buffers
		
			Warning! Left and right color buffers are used for stereoscopic images
			
			Front-left buffer
			Front-right buffer
			Back-left buffer
			Back-right buffer
			Auxiliary buffers (n)
		
		Depth buffer
		Accumulation buffer
		Stencil buffer

- (OpenGL) Rendering context

	A port through which all OpenGL commands pass
	Store all of the state associated with an instance of OpenGL
	Represent the (potentially visible) default framebuffer that rendering commands will draw to (when not drawing to a framebuffer object)
	Link OpenGL to the Windows OS windowing system
	Each rendering context has its own set of OpenGL objects; independent of those from other rendering contexts; (most) can be shared with other rendering contexts - Warning! Object sharing must be made explicitly
	
	Created from a device context (thus makes it suitable to draw on the device referenced by the device context)
	Get same pixel format as the device context - Warning! Set required pixel format to the device context beforehand
	
	Current rendering context
	
		Warning! Making a rendering context current creates an association between supplied rendering context and device context
		
			Device context not need to be the same as when created - Warning! Require same device and pixel format
			Subsequent OpenGL calls made by corresponding thread are made through the rendering context and are drawn on the device referenced by the device context
		
		A thread must have a current rendering context (thread-local variable) to make OpenGL calls - Warning! Can have only one current rendering context at a time
		A rendering context can be current to only one thread at a time
		A window can have multiple rendering contexts drawing to it at one time
	
	Device context vs. Rendering context

		(device context)
		Contain information pertinent to the graphics component (GDI) of Windows
		Must be explicitly specified in a GDI call
		
		(rendering context)
		Contain information pertinent to OpenGL
		Implicit in an OpenGL call
	
	References
	
		https://www.khronos.org/opengl/wiki/OpenGL_Context
		https://learn.microsoft.com/en-us/windows/win32/opengl/rendering-contexts - Rendering context
		https://learn.microsoft.com/en-us/windows/win32/opengl/rendering-context-tasks - Rendering context tasks
		https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-wglcreatecontext - "wglCreateContext" function
		https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-wglmakecurrent - "wglMakeCurrent" function

- Double buffering

	Warning! Double buffering is a pixel-format property ("PFD_DOUBLEBUFFER" flag)
	
	Application draw pixels to back buffer; copy the contents of the back buffer to the front buffer ("SwapBuffers" function) when the image is ready for display
	
	2 available color buffers
		
		Front buffer (or on-screen buffer): target of drawing commands
		Back buffer (or off-screen buffer): displayed on the screen
	
	Enable smooth image changes (important for animated images)
	
	References
	
		https://learn.microsoft.com/en-us/windows/win32/opengl/front--back--and-other-buffers - Front, back and other buffers
		https://learn.microsoft.com/en-us/windows/win32/opengl/drawing-with-double-buffers - Drawing with double buffers
		<path>\glfw-<version>\src\wgl_context.c::swapBuffersWGL - GLFW windowing library swap buffers

- Create simple rendering context (using WGL functions)
	
	Warning! Features of such a basic rendering context may be limited; it can be used as a "dummmy" rendering context to create a more advanced rendering context
	
	Set required pixel format to a device context
	
		Fill out a "PIXELFORMATDESCRIPTOR" structure describing required features
		Obtain the index of the pixel format supported by a device context that is the closest match to a specified pixel format description ("ChoosePixelFormat" function)
		Set that index to be the pixel format of the device context ("SetPixelFormat" function)
	
	Create a rendering context
	
		Create a rendering context suitable for that device
		Make the rendering context - along with the device context - current
	
	References
	
		https://www.khronos.org/opengl/wiki/Creating_an_OpenGL_Context_(WGL)#Simple_Context_Creation - Create simple OpenGL context
		<path>\glfw-<version>\src\wgl_context.c::_glfwInitWGL - GLFW windowing library create "dummy" rendering context
		https://learn.microsoft.com/en-us/cpp/preprocessor/comment-c-cpp?view=msvc-170 - Comment pragma

- Create advanced rendering context (using OpenGL extensions functions)

	Warning! "Dummy" rendering context required - and corresponding "helper" window (because pixel format can only be set once per-window)
	Warning! Require OpenGL function extension loading

	Create "dummy" rendering context
	
		Create "helper" window class and window - Warning! Window may be hidden ("SW_HIDE" mode on "ShowWindow" function)
		Set simple pixel format
		Create "dummy" rendering context
	
	Load required OpenGL extensions - Warning! Use "dummy" rendering context
	
		Warning! "Dummy" rendering context may be deleted after loading required OpenGL extensions
	
		Load required WGL function extensions - Warning! These must be loaded first (needed to retrieve the extension string that tells whether functions are supported)
		
			(e.g. glfw - 3.4 version)
			"wglGetExtensionsStringEXT"
			"wglGetExtensionsStringARB"
			"wglCreateContextAttribsARB"
			"wglSwapIntervalEXT"
			"wglGetPixelFormatAttribivARB"
		
		Load required extensions
		
			(e.g. glfw - 3.4 version)
			"WGL_ARB_multisample": allow multisampled framebuffers
			"WGL_ARB_framebuffer_sRGB": allow color buffers to be in sRGB format
			"WGL_EXT_framebuffer_sRGB"
			"WGL_ARB_create_context": 
			"WGL_ARB_create_context_profile": select a core profile "WGL_CONTEXT_CORE_PROFILE_BIT_ARB" or a compatibility profile "WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB" (use "WGL_CONTEXT_PROFILE_MASK_ARB" flag)
			"WGL_EXT_create_context_es2_profile"
			"WGL_ARB_create_context_robustness"
			"WGL_ARB_create_context_no_error"
			"WGL_EXT_swap_control"
			"WGL_EXT_colorspace"
			"WGL_ARB_pixel_format": new mechanism for getting a pixel format number (based on providing a list of attributes and values)
			"WGL_ARB_pixel_format_float": allow floating-point framebuffers
			"WGL_ARB_context_flush_control"
	
	Create advanced OpenGL rendering context
	
		Create "main" window class and window
		Set advanced pixel format (using required extensions)
		Create advanced rendering context (using required extensions)
	
	References
	
		https://www.khronos.org/opengl/wiki/Creating_an_OpenGL_Context_(WGL)#Proper_Context_Creation - Create advanced OpenGL context
		<path>\glfw-<version>\src\win32_init.c::createHelperWindow - GLFW windowing library create helper window (for the "dummy" rendering context)
		<path>\glfw-<version>\src\wgl_context.c::_glfwCreateContextWGL - GLFW windowing library create advanced rendering context

- Relationship

	Program (1) > (n) Process (1) > (n) Thread
	Thread (1) > (n) Window
	Window (1) > (n) Available Device Context - (1) Current Device Context
	
		(3) - Private, Common, Window - if Private Display Device Context
		(3) - Class, Common, Window - if Class Dispay Device Context
		(2) - Common, Window - if Common Display Device Context
		
	Device Context (1) > (n) Supported Pixel Format - (1) Current Pixel Format
	Device Context (1) > (n) Rendering Context - (1) Current Rendering Context
	Thread (1) > (1) Current Rendering Context & (1) Current Device Context
