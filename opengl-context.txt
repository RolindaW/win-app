
- Library
	
	"GL/gl.h" - core OpenGL functions
	"GL/glu.h" - OpenGL utility library
	"GL/glaux.h" - OpenGL programming guida auxiliary library
	"wingdi.h" - WGL functions; Windows functions that support Microsoft's implementation of OpenGL in Windows
	"C:/Windows/System32/opengl32.dll" - Windows OpenGL implementation (support up to version 1.1)
	
	References
	
		https://learn.microsoft.com/en-us/windows/win32/gdi/windows-gdi
		https://learn.microsoft.com/en-us/windows/win32/api/wingdi/

- Device context (DC)

	A structure that defines a set of graphic objects and their associated attributes, as well as the graphic modes that affect output
	OS requires a device context for each window on the display
	
	Device independence: draw and print output on a variety of devices; software that supports this device independence is contained in two DLL
	
		Graphics Device Interface (GDI) - "Gdi.dll"
		Device Driver - name depends on the device where the application draws output (e.g. "Vga.dll" to draw output on VGA display, "Epson9.dll" to print output on Epson FX-80 printer)
	
	Application must inform GDI to load particular device driver and to prepare the device for drawing/printing operations
	These tasks are accomplished by creating and maintaining a device context
	Warning! An application never has direct access to the DC (it operates on the structure indirectly by calling various functions)
	
	Device context layout: describe the order in which GDI objects and text are revealed (either left-to-right or right-to-left)
	
	Graphic objects
	
		Pen: line drawing; att: style, width, color; "GetDCPenColor"/"SetDCPenColor" function
		Brush: painting and filling; att: style, color, pattern, origin; "GetDCBrushColor"/"SetDCBrushColor" function
		Bitmap: copying or scrolling parts of the screen; att: size (bytes), dimensions (pixels), color-format, compression-scheme, other
		Palette: defining the set of available colors; att: colors, size (number of colors)
		Region: clipping and other operations; att: location, dimensions
		Path: painting and drawing operations; att: shape
		Font: text; att: typeface name, width, height, weight, character set, other
		
		OS automatically stores a set of default graphic objects in device context on create - Warning! There is no default bitmap or path
		"GetCurrentObject" function: retrieve specified type graphic object from a device context
		"GetObject" function: retrieve specified graphic object information (attributes)
		"SelectObject" function: replace specified graphic object in a device context
	
	Graphic modes - Warning! OS-specific
		
		Background: define how background colors are mixed with existing window or screen colors for bitmap and text operations; "GetBkMode"/"SetBkMode" function: get/set default background graphics mode
		Drawing: define how foreground colors are mixed with existing window or screen colors for pen, brush, bitmap, and text operations; "GetROP2"/"SetROP2" function
		Mapping: define how graphics output is mapped from logical (or world) space onto the window, screen, or printer paper; "GetMapMode"/"SetMapMode" function
		Polygon-fill: define how the brush pattern is used to fill the interior of complex regions; "GetPolyFillMode"/"SetPolyFillMode" function
		Stretching: define how bitmap colors are mixed with existing window or screen colors when the bitmap is compressed (or scaled down); "GetStretchBltMode"/"SetStretchBltMode" function
		
		Specify how colors are mixed, where output appears, how output is scaled, other
		OS automatically initializes a device context with default graphic modes
	
	Type
	
		Display device context: draw on video display
		
			Class device context
			
				"CS_CLASSDC" window class device-context style
				One device context to be shared by all windows in the class
				Warning! Strictly for compatibility with 16-bit Windows
			
			Common device context
			
				Not explicitly specified window class device-context style
				Maintained in a special cache (or pool) by OS
				Require release after use (because limited number and intended for shared use)
				Any changes to default data are lost after release
				Used in applications that perform infrequent drawing operations
			
			Private device context
			
				"CS_OWNDC" window class device-context style
				Private unique device context for each window in the class
				Need not to be released after used i.e. retrieve context once and then use it for all subsequent painting
				Retain any changes to default data even after release
				Used in applications that perform numerous drawing operations
				"GetDC" function
			
			Window device context
			
				Enable drawing anywhere in a window - including non-client area
				Warning! Intended for windows with custom non-client area
			
			Parent device context
			
				"CS_PARENTDC" window class device-context style
				Speed up to set up a window clipping region
				Warning! Intended for child windows only
		
		Printer device context: draw on printer (e.g. dot-matrix, ink-jet, laser) or plotter
		Memory (or compatible) device context: draw on bitmap - rather than sending output to an actual device (virtual device)
		Information device context: retrieve default device data
	
	References
	
		https://learn.microsoft.com/en-us/windows/win32/gdi/device-contexts - Device context
		https://learn.microsoft.com/en-us/windows/win32/winmsg/about-window-classes#classes-and-device-contexts - Window class and device context
		https://learn.microsoft.com/en-us/windows/win32/gdi/display-devices - Display device context
		https://learn.microsoft.com/en-us/windows/win32/gdi/private-display-device-contexts - Private display device context
		https://learn.microsoft.com/en-us/windows/win32/gdi/obtaining-a-private-display-device-context - Obtain a private display device context

- Pixel format descriptor
	
	Describe the properties of the default framebuffer that a device context should have
	
	Process to obtain it
	
		Fill out a structure that describes required features ("PIXELFORMATDESCRIPTOR" structure - "wingdi.h")
		Give it to a function that will return a number that represents the closest match that it can find in the list of supported pixel formats ("ChoosePixelFormat" function - "wingdi.h")
		Set that number to be the pixel format of the device context ("SetPixelFormat" function - "wingdi.h")
	
	References
	
		https://learn.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-pixelformatdescriptor
		https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-choosepixelformat
		https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-setpixelformat		

- OpenGL context

	Store all of the state associated with an instance of OpenGL
	Represent the (potentially visible) default framebuffer that rendering commands will draw to (when not drawing to a framebuffer object)
	Each context has its own set of OpenGL objects; independent of those from other contexts; (most) can be shared with other contexts - Warning! Object sharing must be made explicitly
	
	A context must be current in order for any OpenGL command to work; all OpenGL commands affect the state of whichever context is current
	Current context is a thread-local variable - Warning! Single context cannot be current in multiple threads at the same time
	
	References
	
		https://www.khronos.org/opengl/wiki/OpenGL_Context

- Create basic OpenGl device context (using WGL functions)

	TODO: Notes here
	
	References
	
		https://www.khronos.org/opengl/wiki/Creating_an_OpenGL_Context_(WGL) - OpenGL context
		https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-wglcreatecontext - Create OpenGL context
		https://learn.microsoft.com/en-us/windows/win32/opengl/opengl - OpenGL
		https://learn.microsoft.com/en-us/windows/win32/opengl/opengl-on-windows-nt--windows-2000--and-windows-95-98 - OpenGL on Windows
		https://learn.microsoft.com/en-us/windows/win32/opengl/using-opengl-on-windows-nt-2000-and-windows-95-98 - Using OpenGL on Windows
		https://learn.microsoft.com/en-us/windows/win32/opengl/reference-for-win-32-extensions-to-opengl - Reference for Windows extensions to OpenGL: WGL functions, Windows functions and structures
		https://learn.microsoft.com/en-us/windows/win32/opengl/rendering-contexts - Rendering context
		https://learn.microsoft.com/en-us/windows/win32/opengl/pixel-formats - Pixel format

- Create advanced OpenGL device context (using OpenGL extensions functions - Warning! Dummy OpenGL device context required)

	TODO: Notes here
